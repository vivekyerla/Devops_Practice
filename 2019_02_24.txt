
SSH FROM LINUX MACHINE 1 TO LINUX MACHINE 2 IN PASSWORD-LESS WAY .. (i.e., USING PUBLIC KEY AUTHENTICATION)

SSH protocol:
- Remote Desktop Protocol based on Open SSH connection
- V. Imp for  DevOps

Various types of SSH .. SSH can be done in 3 ways:
- private key authentication  (seen in AWS last class) 
	- Generate private key and use that key for authentication .. If that key lost/misplaced you will not be able to connect to remote machine
- user based authentication - connect using username / password
- public key authentication - you have to manage 100 machines .. for one public key there is a respective key .. there are 100 machines 

Use Case: 
- Login from Linux Machine M1 (i.e., Bastion Host) to Linux Machine M2 in password-less way .. (i.e., using public key authentication)

Note:
- In Linux, you have different users (root, ec2-user1, ec2-user2, ..)
- For each user, you have a home directory (/root, /home/ec-user1, /home/ec-user2, ..)
- Under home directory of each user, you have .ssh hidden directory (/root/.ssh, /home/ec2-user1/.ssh, /home/ec2-user2/.ssh, ..)

Command to create pair of public key and private key:
- ssh-keygen -t rsa 
- execute this command on M1 (i.e., Bastion Host)

When I execute this command, I get 2 files under "/root/.ssh" (in context of root), "/home/ec2-user1/.ssh" (in context of ec-user1), ..
- id_rsa (has private key) 
- id_rsa.pub (has public key)
- rsa is a token based algorithm

Solution for password-less SSH from M1 to M2:
- you have a file called "/root/.ssh/authorized-key" on M2
- paste public key from "id_rsa.pub" on M1 into "/root/.ssh/authorized-key" on M2

Hands-On Assignment:
- Create RHEL 7, two EC2 instances and perform above steps

Login to M1 through PuTTY
[ec2-user@ip-172-31-86-17 ~]$ 
[ec2-user@ip-172-31-86-17 ~]$ clear

Ctrl L is shortcut to clear

[ec2-user@ip-172-31-86-17 ~]$ 
[ec2-user@ip-172-31-86-17 ~]$ whoami	# displays user name logged in ("who am i" with spaces will also work)
ec2-user
[ec2-user@ip-172-31-86-17 ~]$

[ec2-user@ip-172-31-86-17 ~]$ sudo su -		# switch to super user
[root@ip-172-31-86-17 ~]#

Why do we switch to super user:
- Because i want to set JAVA_HOME env variable in order to setup hadoop cluster, spark cluster etc. 
- Many environment variables (like JAVA_HOME) are available only for root user 
- In windows also, we have Environment variables like PATH which you can set only when you have admin rights


[root@ip-172-31-86-17 ~]# pwd		# which directory i am
/root
[root@ip-172-31-86-17 ~]#

[root@ip-172-31-86-17 ~]# yum install tree -y		# install software "tree" on this machine
[root@ip-172-31-86-17 ~]#

[root@ip-172-31-86-17 ~]# tree		# tree command displays files and sub-directories in hierarchical manner
.
├── anaconda-ks.cfg
└── original-ks.cfg

0 directories, 2 files
[root@ip-172-31-86-17 ~]#


[root@ip-172-31-86-17 ~]# which tree	# where is the tree software installed .. use "which" command
/bin/tree
[root@ip-172-31-86-17 ~]#

Note:
- Linux is not like windows .. Not everything gets installed under Program Files
- Different softwares gets installed under different folders like /bin, /usr/bin, /usr/sbin etc.

RHEL yum:
- yum is package manager 
- yum fetches RPMs from Linux Repo
- Linux Repo is set in "/etc/yum.repos.d"
- yum is dependent on rpm .. yum installs one or more RPMs (i.e., single rpm and all its dependencies)
- rpm = redhat package manager
- rpm = equivalent of .exe file of windows
- yum = equivalent of .msi file of Windows (MSI Installer)

Ubuntu apt-get:
- In ubuntu, you have "apt-get" .. instead of "yum"
- yum command will not work in Ubuntu
- apt-get is also dependent on rpm



[root@ip-172-31-86-17 ~]# rpm -qa tree
tree-1.6.0-10.el7.x86_64
[root@ip-172-31-86-17 ~]#

[root@ip-172-31-86-17 ~]# ls
anaconda-ks.cfg  original-ks.cfg
[root@ip-172-31-86-17 ~]#
[root@ip-172-31-86-17 ~]#
[root@ip-172-31-86-17 ~]# ls -lrt
total 16
-rw-------. 1 root root 6664 Oct 17 12:27 original-ks.cfg
-rw-------. 1 root root 7329 Oct 17 12:27 anaconda-ks.cfg
[root@ip-172-31-86-17 ~]#


What are file permission (-rw-------), we will see later, when we see "chmod" and "chown"




Create pair of public key and private key
[root@ip-172-31-86-17 ~]# 
[root@ip-172-31-86-17 ~]# ssh-keygen -t rsa			# press enter enter to preserve defaults
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:BcY2ZlDc6LcQwiJtgjTdmFbklEGmvT1yNR3yuLI7kXo root@ip-172-31-86-17.ec2.internal
The key's randomart image is:
+---[RSA 2048]----+
|.+..BO+=++ .     |
|. +=Xoo.X.* .    |
|  .= + * *.o     |
|      o +.+      |
|     o =S+ .     |
|      oo+ .      |
|      ...        |
|     . E.        |
|      ...        |
+----[SHA256]-----+
[root@ip-172-31-86-17 ~]#


Open the private key
[root@ip-172-31-86-17 ~]# 
[root@ip-172-31-86-17 ~]# cat /root/.ssh/id_rsa
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAvDiZzhD8nhNULtPyszLTaeK+boS7z1RW+SZK37HGUSmn+fYy
FsJcacSEVgXs7ghY34B+CP3lTmYa6XBa6tH5+Ek+HbjUli4DKLyXeY9LyRd/qdAx
1tSj72f37cLVDOx79LE+sYkfDJY7QLNm2VDQOh8hsAfeRVAlgWiKZoqssjEVwx2Y
Z70NZaUXZSrb5LRCTfMlVhSbvFDdT4xi+B/0ZnMfEKUNv49KlYPE+Kn2owH9CJ3e
l4Efc1OD608mweibI84suFKIZDUyYVsIwzJJiuPCK5vzsMVl+yxqZMUzCKpVjmiz
4BtwUjE2/wslaNCZiNYvAIIUUv3C9FsVkM5hYQIDAQABAoIBACoLus/9m3D0gGm1
jxHY2MFelYu6uvmlrYgatb8ix1p6I7wC802CPYKjE6zjxfmmg7Pp0D3R+dd5l6lu
H+E05tJAClA5acPio3IGLxBIonVZentEtt12wuhIIWpLi6xHZ6lRrt+Z8gWtya66
ZM9G7j0Nl0jreQuiy74MzF37vHhRfFTPIEcRAnPLn5BrejatDFKckgF8IOt1+6zr
UBlo67vWkfImmxezl9rmf2rxCOEaCAYsrCftKEMuMjHdJiPzVPTwUaz+ntLiR9fF
evykNMhQWEF5VFebSnsBoRkixh4TAgRPuWV++VueAqMXDVPnowRG3SUQKSXM0qGG
P8w5EQECgYEA7jDEcWqxgVcz0u2NQzQFW74IPcUsKafkJ7Bl5y3WVt/to3kSnlAL
ltwOU+EyXBs6vkcc4WNa/XXZAU5TCTi9mTda0qhvkmkhLg1rvR+Mczrcrr/v/6Ps
YrBahuiw4hn3wvNaKZWk4fvYA7c4QwdFvgfNvSqCLUI/nPzvqhp+N0UCgYEAyktc
+vRZcI3G0mK3/V+zC3/QhjxyVfgLx8G4lONPZprnuY0SEFbqq1t7IwHqhuiIIn6N
0Xo2E7cj9rix1VU+KBvr0mpAM4GiPPKeHFGvmsevNuvIq0pn8dXwc/GFFMO7PosU
LQhJz572d87J7IqVXjvBE1dORc6cJbcxwv2ShW0CgYEAwkaIk7FgYoyLuokDZULy
8+dFtYwy/y7vSuf31d1vK6CtpV5FL1c+fKe0D/poJvQWr8g06Ckvt/f9LbGCzMy4
6FVcAOJdTl/tLjDIJZOr7PifsvDegfZkAgKxc8QrMd/YU+xFKBHkUGYnxLAWdaVi
3yJiTt5zGxMj65nqqSW+uLkCgYEAsnljAxVpg1/SNfNamHRCJrcRZh0WUrqQyiAj
lVgmyUOJha7sbPYB/EStkukx3OxyjtxQiqvj4ekGFbpFSw311LUtjWqoUcjhNhxn
WlzHLStXboD/fgAbTMWPavt+ih9Vp4xUtJZHaKG6mWEbzVFHDuhxI3s3V2c9ZBkI
EhxdlNECgYAvWQyKwu0bGg9vm9AtRKFDdgnsIucdhdLYZE1X41G/GlWRUcbGloCi
41e5K+9YYH/Zb8yV5zZG2ePTcs5yC1Nnb6Jp7loJCqnqKSuahQ0N/t6jHSxU/Rvl
Ow3+iz03wp03oaQQNiddK8evRvqx4/n9qKfI3cnRTGvm08EcH9JnaQ==
-----END RSA PRIVATE KEY-----
[root@ip-172-31-86-17 ~]#


Open the public key
[root@ip-172-31-86-17 ~]# 
[root@ip-172-31-86-17 ~]# cat /root/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8OJnOEPyeE1Qu0/KzMtNp4r5uhLvPVFb5JkrfscZRKaf59jIWwlxpxIRWBezuCFjfgH4I/eVOZhrpcFrq0fn4ST4duNSWLgMovJd5j0vJF3+p0DHW1KPvZ/ftwtUM7Hv0sT6xiR8MljtAs2bZUNA6HyGwB95FUCWBaIpmiqyyMRXDHZhnvQ1lpRdlKtvktEJN8yVWFJu8UN1PjGL4H/Rmcx8QpQ2/j0qVg8T4qfajAf0Ind6XgR9zU4PrTybB6Jsjziy4UohkNTJhWwjDMkmK48Irm/OwxWX7LGpkxTMIqlWOaLPgG3BSMTb/CyVo0JmI1i8AghRS/cL0WxWQzmFh root@ip-172-31-86-17.ec2.internal
[root@ip-172-31-86-17 ~]#


The last part - "root@ip-172-31-86-17.ec2.internal" ... This part tells you from which user this key is generated
Leave the last part and .. Copy rest of the content from public key
Append the copied public key in "/root/.ssh/authorized-key" on M2
Now, SSH from M1 to M2

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8OJnOEPyeE1Qu0/KzMtNp4r5uhLvPVFb5JkrfscZRKaf59jIWwlxpxIRWBezuCFjfgH4I/eVOZhrpcFrq0fn4ST4duNSWLgMovJd5j0vJF3+p0DHW1KPvZ/ftwtUM7Hv0sT6xiR8MljtAs2bZUNA6HyGwB95FUCWBaIpmiqyyMRXDHZhnvQ1lpRdlKtvktEJN8yVWFJu8UN1PjGL4H/Rmcx8QpQ2/j0qVg8T4qfajAf0Ind6XgR9zU4PrTybB6Jsjziy4UohkNTJhWwjDMkmK48Irm/OwxWX7LGpkxTMIqlWOaLPgG3BSMTb/CyVo0JmI1i8AghRS/cL0WxWQzmFh


[root@ip-172-31-86-17 ~]# 
[root@ip-172-31-86-17 ~]# ssh root@172.31.94.200		
The authenticity of host '172.31.94.200 (172.31.94.200)' can't be established.
ECDSA key fingerprint is SHA256:6mO7u25CJF9ZFfMwCqJ8/qDUL5b2wGzDcctWmjUEKLU.
ECDSA key fingerprint is MD5:a8:8f:11:b9:36:66:25:45:d7:d0:56:34:f1:b2:dd:58.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '172.31.94.200' (ECDSA) to the list of known hosts.
Last login: Sun Feb 24 04:30:12 2019
[root@ip-172-31-94-200 ~]#

Note:
- SSH using private IP was possible because both M1 and M2 are in same subnet
- If M1, M2 are not in same subnet, then SSH using only public IP will be possible

==================================================================================

GIT COMMANDS

We need to daily push our code, scripts, commands etc. in GitHub repository
Git is integral part of Linux

Lets create our own GitHub repository
1. Go to web browser and login to GitHub account - https://github.com/dashboard 
2. Click on "Your repositories" .. You come to https://github.com/vivekyerla?tab=repositories
3. Click on "New"
4. Click "Create Repository"

Remote Repo and Local Repo:
- In Git, there is concept of local repository and global (remote) repository
- "https://github.com/vivekyerla/Devops_Practice" is my Global repository
- "/opt/Devops_Practice" is my Local repository on Linux Machine M1

Note:
- Our remote repository is already created .. We need to create local repository using command "git init" ..and connect local repo to remote repo
- But first install git on M1 where we want to create local repository 
- Before that, first create folders and go to those folders

On Linux Machine M1:
create folders and go to those folders
[root@ip-172-31-94-200 ~]#
[root@ip-172-31-94-200 ~]# mkdir -p /opt/Devops_Practice
[root@ip-172-31-94-200 ~]# cd /opt/Devops_Practice
[root@ip-172-31-94-200 Devops_Practice]#
[root@ip-172-31-94-200 Devops_Practice]#
[root@ip-172-31-94-200 Devops_Practice]# cd
[root@ip-172-31-94-200 ~]# mkdir -p /opt/Devops_Practice && cd /opt/Devops_Practice		# 2 commands in one line
[root@ip-172-31-94-200 Devops_Practice]#

install git
[root@ip-172-31-94-200 Devops_Practice]#
[root@ip-172-31-94-200 Devops_Practice]# yum install git -y
Loaded plugins: amazon-id, rhui-lb, search-disabled-repos
rhui-REGION-client-config-server-7                                   

create local repository using command "git init"
[root@ip-172-31-94-200 Devops_Practice]# 
[root@ip-172-31-94-200 Devops_Practice]# git init
Initialized empty Git repository in /opt/Devops_Practice/.git/
[root@ip-172-31-94-200 Devops_Practice]#

We have now converted "/opt/Devops_Practice" directory into local repo
Now we need to connect local repo to Global (remote) repo .. use command "git remote add origin"

Task 1: 
- Fetch all Linux commands that we executed in a text file and push to Git

[root@ip-172-31-94-200 Devops_Practice]#
[root@ip-172-31-94-200 Devops_Practice]# history		# "history" command
    1  pwd
    2  exit
    3  pwd
    4  touch 1
    5  ls
    6  rm 1
    7  ls
    8  rm 1
    9  ls
   10  mkdir -p /opt/Devops_Practice
   11  cd /opt/Devops_Practice
   12  cd
   13  mkdir -p /opt/Devops_Practice && cd /opt/Devops_Practice
   14  yum install git -y
   15  git init
   16  history
[root@ip-172-31-94-200 Devops_Practice]#


[root@ip-172-31-86-17 Devops_Practice]# vi linuxcommands.txt
[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]# pwd
/opt/Devops_Practice
[root@ip-172-31-86-17 Devops_Practice]#

[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]# git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       linuxcommands.txt
nothing added to commit but untracked files present (use "git add" to track)
[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]#


[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]# git add linuxcommands.txt
[root@ip-172-31-86-17 Devops_Practice]# 

[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]# git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
#
#       new file:   linuxcommands.txt
#
[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]#


[root@ip-172-31-86-17 Devops_Practice]# git commit -m"my first commit"
[master (root-commit) 83bbb32] my first commit
 Committer: root <root@ip-172-31-86-17.ec2.internal>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 21 insertions(+)
 create mode 100644 linuxcommands.txt
[root@ip-172-31-86-17 Devops_Practice]#


[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]# git status
# On branch master
nothing to commit, working directory clean
[root@ip-172-31-86-17 Devops_Practice]#


[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]# git remote add origin https://github.com/vivekyerla/Devops_Practice.git
[root@ip-172-31-86-17 Devops_Practice]#

[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]# git push -u origin master
Username for 'https://github.com': vivekyerla
Password for 'https://vivekyerla@github.com':
Counting objects: 3, done.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 468 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/vivekyerla/Devops_Practice.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.
[root@ip-172-31-86-17 Devops_Practice]#



master is the branch .. on my local repo and remote repo as well.
How to deal with different branches we will see later.


Task 2:
- Fetch all Git commands that we executed in a text file and push to Git

[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]# history | grep git
   16  yum install git -y
   17  git init
   21  git status
   22  git add linuxcommands.txt
   23  git status
   24  git commit -m"my first commit"
   25  git status
   26  git remote add origin https://github.com/vivekyerla/Devops_Practice.git
   27  git push -u origin master
   28  history | grep git
[root@ip-172-31-86-17 Devops_Practice]#




Steps to Push "gitcommands.txt" in GitHub:
- git init ... need not execute again
- git status
- git add gitcommands.txt
- git status
- git commit -m"git commands commit"
- git status
- git remote add origin https://github.com/vivekyerla/Devops_Practice.git ... need not execute again
- git push -u origin master
- Refresh https://github.com/vivekyerla/Devops_Practice ... You can see "gitcommands.txt" available in remote repository
- git log

[root@ip-172-31-86-17 Devops_Practice]#
[root@ip-172-31-86-17 Devops_Practice]# git log
commit 920d5d38c2c0280f3550ca2fdcd3a84326a982b6
Author: root <root@ip-172-31-86-17.ec2.internal>
Date:   Sun Feb 24 05:49:20 2019 +0000

    my git commands

commit 83bbb329f17db4386dd128142b21f98e05f602f2
Author: root <root@ip-172-31-86-17.ec2.internal>
Date:   Sun Feb 24 05:31:34 2019 +0000

    my first commit
[root@ip-172-31-86-17 Devops_Practice]#



NOTE: 
- Remote Git Repo link: https://github.com/vivekyerla/Devops_Practice
- Steps to create local repo on your desktop, so that 2 clients interacting same Remote Repo. On Windows CMD prompt

Microsoft Windows [Version 10.0.17134.523]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Users\Admin\Desktop\DevOps\Git>git clone https://github.com/vivekyerla/Devops_Practice.git

==================================================================================

yum install git -y	## install Git client
git init			## create local repo
git status			## get status of changes
git add linuxcommands.txt	## add files to changelist
git status	
git commit -m"my first commit"  	## commit changelist
git status
git remote add origin https://github.com/vivekyerla/Devops_Practice.git	## create link between local repo and remote repo
git push -u origin master ## push = check-in, pull = check-out		## Push your code on Remote Repo Master branch

